# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-03-07 15:35
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(db_index=True)),
                ('icon', models.TextField(db_index=True, help_text='Name of font-awesome icon; e.g. `fa-beer`')),
                ('description', models.TextField(blank=True, default=None)),
            ],
            options={
                'db_table': 'activity',
            },
        ),
        migrations.CreateModel(
            name='AvailableResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(db_index=True, help_text='Score for given response; e.g. 4.')),
                ('label', models.TextField(db_index=True, help_text="Text label for given response; e.g. 'Several days'.")),
            ],
            options={
                'db_table': 'available_response',
            },
        ),
        migrations.CreateModel(
            name='Bathroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('process', models.CharField(choices=[('1', 'Number 1'), ('2', 'Number 2')], db_index=True, help_text='You know...', max_length=1)),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_bathroom',
            },
        ),
        migrations.CreateModel(
            name='Daily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('type', models.CharField(choices=[('screen_time', 'Screen time'), ('steps', 'Steps')], db_index=True, help_text='The type of daily metric.', max_length=15)),
                ('value', models.FloatField(blank=True, db_index=True, help_text='The recorded value for the type of metric', null=True)),
                ('units', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('steps', 'Steps'), ('hours', 'Hours')], db_index=True, help_text='Units associated with the <code>Value</code> field.', max_length=10, null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_daily',
            },
        ),
        migrations.CreateModel(
            name='Drink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('type', models.CharField(choices=[('water', 'Water'), ('tea', 'Tea'), ('coffee', 'Coffee'), ('alcohol', 'Alcohol'), ('soda', 'Soda')], db_index=True, default='water', help_text='The type of item drunk.', max_length=10)),
                ('value', models.FloatField(blank=True, db_index=True, help_text='The recorded volume for the metric event.', null=True)),
                ('units', models.CharField(blank=True, choices=[('fl oz', 'Fluid Ounce'), ('ml', 'Milliliter')], db_index=True, help_text='Units associated with the <code>Value</code> field.', max_length=10, null=True)),
                ('has_caffeine', models.BooleanField(db_index=True, default=True, help_text='Whether the metric event contained caffeine.')),
                ('alone', models.BooleanField(db_index=True, default=True, help_text='Whether metric event occurred while being alone.')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_drink',
            },
        ),
        migrations.CreateModel(
            name='Eat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('end', models.DateTimeField(blank=True, db_index=True, help_text='When provided, defines a duration of the metric event by subtracting the <code>Time stamp</code> field.', null=True)),
                ('type', models.CharField(choices=[('snack', 'Snack'), ('meal', 'Meal')], db_index=True, help_text='The type of meal eaten.', max_length=10)),
                ('item', models.TextField(blank=True, db_index=True, help_text='Description of any item eaten.', null=True)),
                ('value', models.FloatField(blank=True, db_index=True, help_text='The recorded calories for the metric event.', null=True)),
                ('units', models.CharField(blank=True, choices=[('cal', 'Cal')], db_index=True, help_text='Units associated with the <code>Value</code> field.', max_length=10, null=True)),
                ('alone', models.BooleanField(db_index=True, default=True, help_text='Whether metric event occurred while being alone.')),
                ('home_cooked', models.BooleanField(db_index=True, default=True, help_text='Whether the meal was cooked at home.')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_eat',
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('end', models.DateTimeField(blank=True, db_index=True, help_text='When provided, defines a duration of the metric event by subtracting the <code>Time stamp</code> field.', null=True)),
                ('type', models.CharField(choices=[('gym', 'Gym'), ('run', 'Run'), ('walk', 'Walk')], db_index=True, help_text='The type of exercise.', max_length=10)),
                ('value', models.FloatField(blank=True, db_index=True, help_text='The recorded value for the type of exercise.', null=True)),
                ('units', models.CharField(blank=True, choices=[('miles', 'Miles'), ('km', 'Kilometers')], db_index=True, help_text='Units associated with the <code>Value</code> field.', max_length=10, null=True)),
                ('alone', models.BooleanField(db_index=True, default=True, help_text='Whether metric event occurred while being alone.')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_exercise',
            },
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('medication', models.TextField(db_index=True, help_text='Name of medication taken.')),
                ('dose', models.FloatField(db_index=True, help_text='Dose of medication taken in mg.')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_medication',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('notes', models.TextField(help_text='Any extra notes associated with metric event.')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_note',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(db_index=True, help_text='The text for the question.')),
            ],
            options={
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('description', models.TextField(null=True, unique=True)),
                ('form_header', models.TextField(help_text="Questionnaire form header help; e.g. 'Over the last 2 weeks, how often have you been bothered by the following problems?'", null=True)),
            ],
            options={
                'db_table': 'questionnaire',
            },
        ),
        migrations.CreateModel(
            name='Relax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('end', models.DateTimeField(blank=True, db_index=True, help_text='When provided, defines a duration of the metric event by subtracting the <code>Time stamp</code> field.', null=True)),
                ('type', models.CharField(choices=[('read_book', 'Read book'), ('work', 'Work'), ('hobby', 'Hobby'), ('therapist', 'Therapist'), ('phone', 'Phone'), ('friends', 'Friends'), ('walk', 'Walk'), ('video_game', 'Video game'), ('meditation', 'Meditation'), ('walk', 'Walk'), ('internet', 'Internet'), ('other', 'Other')], db_index=True, help_text='The type of relax/social event.', max_length=15)),
                ('alone', models.BooleanField(db_index=True, default=True, help_text='Whether metric event occurred while being alone.')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_relax',
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Date on which question was answered.')),
                ('question', models.ForeignKey(help_text='Question being answered/scored.', on_delete=django.db.models.deletion.PROTECT, to='oolong_app.Question')),
                ('response', models.ForeignKey(help_text='Response to given question.', on_delete=django.db.models.deletion.CASCADE, to='oolong_app.AvailableResponse')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'response',
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('alone', models.BooleanField(db_index=True, default=True, help_text='Whether metric event occurred while being alone.')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_sex',
            },
        ),
        migrations.CreateModel(
            name='Sleep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_stamp', models.DateTimeField(db_index=True, help_text='When the metric event occurred or began.', unique=True)),
                ('end', models.DateTimeField(db_index=True, help_text='When provided, defines a duration of the metric by subtracting the <code>Time stamp</code> field.')),
                ('alone', models.BooleanField(db_index=True, default=True, help_text='Whether metric event occurred while being alone.')),
                ('notes', models.TextField(blank=True, help_text='Any extra notes associated with metric event.', null=True)),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'metric_sleep',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='questionnaire',
            field=models.ForeignKey(help_text='Which questionnaire the particular question is associated with.', on_delete=django.db.models.deletion.PROTECT, to='oolong_app.Questionnaire'),
        ),
        migrations.AddField(
            model_name='availableresponse',
            name='questionnaire',
            field=models.ForeignKey(help_text='Questionnaire for which response applies; e.g. GAD-7.', on_delete=django.db.models.deletion.PROTECT, to='oolong_app.Questionnaire'),
        ),
        migrations.AlterUniqueTogether(
            name='response',
            unique_together=set([('user', 'date', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together=set([('question', 'questionnaire')]),
        ),
        migrations.AlterUniqueTogether(
            name='availableresponse',
            unique_together=set([('score', 'questionnaire'), ('label', 'questionnaire')]),
        ),
    ]
